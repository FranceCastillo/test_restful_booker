# AUTOMATIZACI√ìN DE PRUEBAS A SERVICIOS WEB - RESTFUL - BOOKER

### üìÑ Contexto:
RestFul Booker, es una API que puede utilizar para obtener m√°s informaci√≥n sobre API Testing o probar
herramientas de API Testing. RestFul-Booker contiene end-points que permiten Crear, Leer, Actualizar y
Eliminar reservas. El API REST viene con funciones de autenticaci√≥n y errores para que pueda explorar.
La API viene precargada con 10 registros para que pueda trabajar y se restablece cada 10 minutos a ese
estado predeterminado.

### üö© Problem√°tica:
Actualmente en la aplicaci√≥n de reservas RESTFUL - BOOKER se est√°n detectando diferentes errores
funcionales a nivel de la GUI, pero al detectarlos en este nivel no se puede dar feedback temprano a los
desarrolladores. Por lo que se requiere que se automaticen pruebas a nivel de integraci√≥n, por eso se
requiere implementar pruebas automatizadas a los servicios web.

### üí° Soluci√≥n:
Con el objetivo de identificar y abordar de forma precoz los distintos fallos funcionales 
en la interfaz gr√°fica de usuario de la aplicaci√≥n, se sugiere la implementaci√≥n de conjuntos de pruebas automatizadas 
enfocadas en la integraci√≥n de los servicios web utilizados. Esto facilitar√° la evaluaci√≥n peri√≥dica y eficiente de la API. 
Lo que permitira detectar la mayor parte de los errores durante la etapa de desarrollo.

***
# ‚úÖ PLAN DE PRUEBAS FUNCIONAL
(NIVEL API TESTING)

### RESUMEN

> **FEATURE TEST PLAN**: | Restful - Booking | Crear, modificar, actualizar y eliminar reservas del sistema.
>
>*Como usuario de booking logueado,  
Quiero crear, consultar, actualizar y eliminar reservas  
Para agendar mis pr√≥ximos viajes*

* El Plan de pruebas se llevar√° a cabo a nivel de **Pruebas de integraci√≥n**.
* El Plan de pruebas se llevar√° a cabo en **Postman** de manera manual por medio de una collection.
* El Plan de pruebas se llevar√° a cabo con **Karate** para la automatizacion de apis, **cucumber** como herramienta de desarrollo BDD y **Java** como lenguaje de programaci√≥n

### OBJETIVO
Validar las funcionalidades b√°sicas que puede realizar un usuario con una reserva (Auth, Booking y Ping), usando cucumber como lenguaje BDD en y Karate para automatizar el proceso.

### SUPUESTOS
* La api se encuentra siempre en funcionamiento.
* Acceso a la p√°gina web donde est√° la documentaci√≥n de la API.
* Herramientas de pruebas como IDE (Intellij Idea, Visual Studio Code, etc) y Postman correctamente instalados y configurados.
* Conocimientos en API Testing.

### COBERTURA
* Capacidad de alcanzar las funcionalidades de Auth, Booking y Ping.
* No obstante, se podr√° realizar pruebas adicionales en caso de tener ventaja para validar m√°s funciones.
* Seguir las reglas de negocio sobre la creaci√≥n, consulta, actualizaci√≥n y eliminaci√≥n de las reservas.
* Contemplar m√≠nimo un **_HAPPY PATH_** y **_UNHAPPY PATH_** por m√©todo HTTP (GET,POST,PUT,DELETE).
* No se validar√°n los escenarios que no fueron contemplados en los flujos a probar.

### RIESGOS
| Riesgo                                                  | Mitigaci√≥n                                                                                                  |
|:--------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|
| No conocer el funcionamiento o arquitectura de la API   | Ir a la documentaci√≥n oficial de [RESTFUL - BOOKER](https://restful-booker.herokuapp.com/apidoc/index.html) |
| No se puede generar el TOKEN de autenticaci√≥n de la API | Utilizar el mock de Authorization descrito en la documentaci√≥n                                              |
| QA Environment est√° ca√≠do                               | Usar el recurso **/ping** para validar cuando la api est√© UP.                                                   |
***
### RECURSOS
* **Postman**: como herramienta de apoyo para hacer pruebas de los recursos de la API.
* **Karate**: Framework principal para realizar la automatizaci√≥n de los scripts de pruebas.
* **Plan de pruebas**: Documento para la planificaci√≥n de las pruebas.
* **Documentaci√≥n API**: P√°gina web de [RESTFUL - BOOKER](https://restful-booker.herokuapp.com/apidoc/index.html)

### CONFIGURACI√ìN DEL AMBIENTE
* Las pruebas se realizaran en el ambiente de **QA**.
* Las pruebas ser√°n ejecutadas con la API de **RESTFUL - BOOKER**.
* Las pruebas seran en la versi√≥n **v1.0.0** de **RESTFUL - BOOKER**.
* El endpoint de pruebas ser√°: `https://restful-booker.herokuapp.com`

#### üîó API Endpoints
| HTTP Verbs | Endpoints    | Acci√≥n                                                                                           |
|------------|--------------|--------------------------------------------------------------------------------------------------|
| POST       | /auth        | Crea un nuevo token de autenticaci√≥n para acceder a PUT y DELETE                                 |
| GET        | /booking     | Devuelve los id de todas las reservas que existen dentro de la API.                              |
| GET        | /booking/:id | Devuelve una reserva espec√≠fica basada en la identificaci√≥n de la reserva proporcionada          |
| POST       | /booking     | Crea una nueva reserva en la API                                                                 |
| GET        | /booking/:id | Actualiza una reserva actual                                                                     |
| PATCH      | /booking/:id | Actualiza una reserva actual con una carga √∫til parcial                                          |
| DELETE     | /booking/:id | Elimina una reserva actual en la API                                                             |
| GET        | /ping        | Un punto final de verificaci√≥n de estado simple para confirmar si la API est√° en funcionamiento. |
***
### NIVELES Y TIPOS DE PRUEBA
**Niveles de pruebas:**
* Pruebas de integraci√≥n

**Tipos de pruebas:**
* Pruebas funcionales: En este tipo de pruebas vamos a validar las funcionalidades de la API (Ej: c√≥digos de estado)
* Pruebas de integraci√≥n: Para validar la integraci√≥n de todos los recursos de la API.

### CONSIDERACIONES DE LAS PRUEBAS
- [ ] Crear una colecci√≥n en postman que permita realizar pruebas manuales a los servicios web.
- [ ] Automatizar las funcionalidades de: Auth, Booking y Ping.
- [ ] Considerar en la automatizaci√≥n de pruebas los m√©todos http: POST, GET, PUT, PATCH,
  DELETE.
- [ ] Considerar la creaci√≥n de escenarios Happy Paths y UnHappy Paths.
- [ ] Considerar en la automatizaci√≥n todas las aserciones posibles.


### FLUJOS A PROBAR (dentro de alcance)

Test dise√±ados para validar los escenarios **Happy Paths** üòÉ
***
> **‚ú® FEATURE**: Verify the creation of a new auth token
> - [x] Verify token with valid username and password
>
> **‚ú® FEATURE**: Creates a new booking in the AP
> - [x] Create a new booking
> - [x] Create a new booking without name
> - [x] Create a new booking without lastname
> - [x] Create a new booking without price
> - [x] Create a new booking without checkin
> - [x] Create a new booking without checkout
>
> **‚ú® FEATURE**: Returns a specific booking based upon the booking id provided
> - [x] Returns booking by valid ID
> - [x] Verify that doesn't return booking if ID not exist
>
> **‚ú® FEATURE**: Returns the ids of all the bookings that exist
> - [x] Returns booking by name
> - [x] Returns booking by date
>
> **‚ú® FEATURE**: Updates a current booking
> - [x] Update a current booking
> - [x] Update id not exist
>
> **‚ú® FEATURE**: Updates a current booking with a partial payload
> - [x] Update only name of current booking
>
> **‚ú® FEATURE**: Delete a current booking
> - [x] Delete a current booking

***
Test dise√±ados para validar los escenarios **UNHappy Paths** ü§°

> **‚ú® FEATURE**: Verify the creation with incorrect credentials
> - [x] Verify token with incorrect username
> - [x] Verify token with incorrect password
> - [x] Verify token with empty username
> - [x] Verify token with empty password
> - [x]  Verify token with empty username and password
***

### CRITERIOS DE SALIDA
> ‚úÖ Las pruebas han terminado con los siguientes defectos:
> * Al enviar la solicitud del token sin parametros arroja un codigo 200 cuando en esos cosas deberia ser un 400
> * Permite realizar la creci√≥n de una reserva enviandole los campos nombre, apellido o precio vacios y arroja codigo 200 cuando deberia ser un 400


### ENTEGRABLES DE PRUEBAS
> ‚òëÔ∏è Colecci√≥n en postman, la ruta de su ubicaci√≥n es: `resources/deliverables/restful_booker.postman_collection.json`  
> ‚òëÔ∏è El plan de pruebas actual, la ruta de su ubicaci√≥n es: `resources/deliverables/PLAN_DE_PRUEBAS.markdown`  
> ‚òëÔ∏è El informe del resultado de pruebas, la ruta de su ubicaci√≥n es: `target\cucumber-html-reports`   
> ‚òëÔ∏è El repositorio en GitHub con los scripts desarrollados: [test_restful_booker](https://github.com/FranceCastillo/test_restful_booker)
***

### ‚ùó INFORMACI√ìN ADICIONAL
>*Toda la informaci√≥n relacionada a la estructura del proyecto se especifica en el archivo README.md*
***